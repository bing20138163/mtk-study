[KERNEL]:openwrt/build_dir/target-mipsel_24kec+dsp_uClibc-0.9.33.2/linux-ramips_mt7628/linux-3.18.29/
1.Add VID and PID 
   在File: [KERNEL]/drivers/usb/serial/option.c
   
	static const struct usb_device_id option_ids[] = { 
//////////////////////////////////////////////////////////////	
	#if 1 //Added by Quectel
	 { USB_DEVICE(0x05C6, 0x9090) }, /* Quectel UC15 */ 
	 { USB_DEVICE(0x05C6, 0x9003) }, /* Quectel UC20 */ 
	 { USB_DEVICE(0x2C7C, 0x0125) }, /* Quectel EC25/EC20 R2.0 */
	 { USB_DEVICE(0x2C7C, 0x0121) }, /* Quectel EC21 */ 
	 { USB_DEVICE(0x05C6, 0x9215) }, /* Quectel EC20 */ 
	{ USB_DEVICE(0x2C7C, 0x0191) }, /* Quectel EG91 */ 
	{ USB_DEVICE(0x2C7C, 0x0195) }, /* Quectel EG95 */
	{ USB_DEVICE(0x2C7C, 0x0306) }, /* Quectel EG06/EP06/EM06 */
	{ USB_DEVICE(0x2C7C, 0x0296) }, /* Quectel BG96 */
	#endif
////////////////////////////////////////////////////////////////

2.delete VP413
   2.1  DELETE THIS File: [KERNEL]/drivers/usb/serial/qcserial.c   
    {USB_DEVICE(0x05c6, 0x9215)}, /* Acer Gobi 2000 Modem device (VP413) */  
   2.2  DELETE THIS File:/linux-3.10.x/drivers/net/usb/qmi_wwan.c	
    {QMI_GOBI_DEVICE(0x05c6, 0x9215)}, /* Acer Gobi 2000 Modem device (VP413) */

3.Add the Zero Packet Mechanism
	File: [KERNEL]/drivers/usb/serial/usb_wwan.c 
	static struct urb *usb_wwan_setup_urb(struct usb_serial *serial, int endpoint, 
	 int dir, void *ctx, char *buf, int len,void (*callback) (struct urb *)) 
	{ 
	……
	 usb_fill_bulk_urb(urb, serial->dev, 
	 usb_sndbulkpipe(serial->dev, endpoint) | dir, 
	 buf, len, callback, ctx); 
////////////////////////////////////////////////////////////////////////////////////////	 
	#if 1 //Added by Quectel for Zero Packet
	if (dir == USB_DIR_OUT) { 
	 struct usb_device_descriptor *desc = &serial->dev->descriptor; 
	 if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9090)) 
	 urb->transfer_flags |= URB_ZERO_PACKET; 
	 if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9003)) 
	 urb->transfer_flags |= URB_ZERO_PACKET; 
	 if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9215)) 
	 urb->transfer_flags |= URB_ZERO_PACKET; 
	 if (desc->idVendor == cpu_to_le16(0x2C7C)) 
	 urb->transfer_flags |= URB_ZERO_PACKET; 
	} 
	#endif
///////////////////////////////////////////////////////////////////////////////////////////	
	 return urb; 
	} 
	
4.Add Reset Resume
	File: [KERNEL]/drivers/usb/serial/option.c
	static struct usb_serial_driver option_1port_device = { 
	……
	#ifdef CONFIG_PM 
	 .suspend = usb_wwan_suspend, 
	 .resume = usb_wwan_resume, 
////////////////////////////////////////////////////////	 
	#if 1 //Added by Quectel
	 .reset_resume = usb_wwan_resume, 
	#endif 
///////////////////////////////////////////////////////	
	#endif 
	};
5.Use QMI
   File: [KERNEL]/drivers/usb/serial/option.c
	static int option_probe(struct usb_serial *serial, const struct usb_device_id *id) { 
	 struct usb_wwan_intf_private *data; 
	……
///////////////////////////////////////////////////////////////////////////	
	#if 1 //Added by Quectel
	//Quectel UC20's interface 4 can be used as USB Network device
	 if (serial->dev->descriptor.idVendor == cpu_to_le16(0x05C6) && 
	serial->dev->descriptor.idProduct == cpu_to_le16(0x9003) 
	 && serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4) 	
		return -ENODEV; 
	//Quectel EC20's interface 4 can be used as USB Network device 
	 if (serial->dev->descriptor.idVendor == cpu_to_le16(0x05C6) && 
	serial->dev->descriptor.idProduct == cpu_to_le16(0x9215) 
	 && serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4) 
		return -ENODEV; 
	//Quectel EC25&EC21&EC20 R2.0&EG91&EG95&EG06&EP06&EM06&BG96's interface 4 can be used as USB Network device 
	 if (serial->dev->descriptor.idVendor == cpu_to_le16(0x2C7C) 
	 && serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4) 
		return -ENODEV; 
	#endif
////////////////////////////////////////////////////////////////////////////	
	 /* Store device id so we can use it during attach. */ 
	 usb_set_serial_data(serial, (void *)id); 
	 return 0; 
	}
	
6. Enable CONFIG_USB_SERIAL_OPTION	
	[*] Device Drivers → 
		[*] USB Support → 
			[*] USB Serial Converter support → 
				[*] USB driver for GSM and CDMA modems
7.	add qmi vid and pid
[KERNEL]/drivers/net/usb/qmi_wwan.c 
static const struct usb_device_id products[] = { 
////////////////////////////////////////////////////
#if 1 //Added by Quectel
#ifndef QMI_FIXED_INTF 
/* map QMI/wwan function by a fixed interface number */ 
#define QMI_FIXED_INTF(vend, prod, num) \ 
 .match_flags = USB_DEVICE_ID_MATCH_DEVICE | USB_DEVICE_ID_MATCH_INT_INFO, \ 
 .idVendor = vend, \ 
 .idProduct = prod, \ 
 .bInterfaceClass = 0xff, \ 
 .bInterfaceSubClass = 0xff, \ 
 .bInterfaceProtocol = 0xff, \ 
 .driver_info = (unsigned long)&qmi_wwan_force_int##num, 
#endif 
 { QMI_FIXED_INTF(0x05C6, 0x9003, 4) }, /* Quectel UC20 */ 
 { QMI_FIXED_INTF(0x2C7C, 0x0125, 4) }, /* Quectel EC25/EC20 R2.0 */
 { QMI_FIXED_INTF(0x2C7C, 0x0121, 4) }, /* Quectel EC21 */ 
 { QMI_FIXED_INTF(0x05C6, 0x9215, 4) }, /* Quectel EC20 */ 
{ QMI_FIXED_INTF(0x2C7C, 0x0191, 4) }, /* Quectel EG91 */
{ QMI_FIXED_INTF(0x2C7C, 0x0195, 4) }, /* Quectel EG95 */
{ QMI_FIXED_INTF(0x2C7C, 0x0306, 4) }, /* Quectel EG06/EP06/EM06 */
{ QMI_FIXED_INTF(0x2C7C, 0x0296, 4) }, /* Quectel BG96 */
#endif 
//////////////////////////////////////////////////////		

8.Add Support for Raw IP Mode
[KERNEL]/drivers/net/usb/qmi_wwan.c

#include <linux/usb/usbnet.h> 
#include <linux/usb/cdc-wdm.h> 
////////////////////////////////////////////////////////////////////////////////////
#if 1 //Added by Quectel 
#include <linux/etherdevice.h> 
struct sk_buff *qmi_wwan_tx_fixup(struct usbnet *dev, struct sk_buff *skb, gfp_t flags) 
{ 
 if (dev->udev->descriptor.idVendor != cpu_to_le16(0x2C7C)) 
 return skb; 
 // Skip Ethernet header from message 
 if (skb_pull(skb, ETH_HLEN)) { 
 return skb; 
 } else { 
 dev_err(&dev->intf->dev, "Packet Dropped "); 
 } 
 // Filter the packet out, release it 
 dev_kfree_skb_any(skb); 
 return NULL; 
} 
#include <linux/version.h> 
#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,9,1 )) 
static int qmi_wwan_rx_fixup(struct usbnet *dev, struct sk_buff *skb) 
{ 
 __be16 proto; 
 if (dev->udev->descriptor.idVendor != cpu_to_le16(0x2C7C)) 
 return 1;	
/* This check is no longer done by usbnet */ 
 if (skb->len < dev->net->hard_header_len) 
 return 0; 
 switch (skb->data[0] & 0xf0) { 
 case 0x40: 
 proto = htons(ETH_P_IP); 
 break; 
 case 0x60: 
 proto = htons(ETH_P_IPV6); 
 break; 
 case 0x00: 
 if (is_multicast_ether_addr(skb->data)) 
 return 1; 
 /* possibly bogus destination - rewrite just in case */ 
 skb_reset_mac_header(skb); 
 goto fix_dest; 
 default: 
 /* pass along other packets without modifications */ 
 return 1; 
 } 
 if (skb_headroom(skb) < ETH_HLEN) 
 return 0; 
 skb_push(skb, ETH_HLEN); 
 skb_reset_mac_header(skb); 
 eth_hdr(skb)->h_proto = proto; 
 memset(eth_hdr(skb)->h_source, 0, ETH_ALEN); 
fix_dest: 
 memcpy(eth_hdr(skb)->h_dest, dev->net->dev_addr, ETH_ALEN); 
 return 1; 
} 
/* very simplistic detection of IPv4 or IPv6 headers */ 
static bool possibly_iphdr(const char *data) 
{ 
 return (data[0] & 0xd0) == 0x40; 
} 
#endif 
#endif
////////////////////////////////////////////////////////
...... 

/* if follow function exist, modify it as below */
static int qmi_wwan_bind(struct usbnet *dev, struct usb_interface *intf) 
{ 
……
////////////////////////////////////////////////////////////////
#if 1 //Added by Quectel
 if (dev->udev->descriptor.idVendor == cpu_to_le16(0x2C7C)) { 
 dev_info(&intf->dev, "Quectel EC25&EC21&EC20 
R2.0&EG91&EG95&EG06&EP06&EM06&BG96 work on RawIP mode\n"); 
 dev->net->flags |= IFF_NOARP; 
#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,9,1 )) 
 /* make MAC addr easily distinguishable from an IP header */ 
 if (possibly_iphdr(dev->net->dev_addr)) { 
 dev->net->dev_addr[0] |= 0x02; /* set local assignment bit */ 
 dev->net->dev_addr[0] &= 0xbf; /* clear "IP" bit */ 
 } 
#endif 
 usb_control_msg( 
 interface_to_usbdev(intf), 
 usb_sndctrlpipe(interface_to_usbdev(intf), 0), 
 0x22, //USB_CDC_REQ_SET_CONTROL_LINE_STATE 
 0x21, //USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE 
 1, //active CDC DTR 
 intf->cur_altsetting->desc.bInterfaceNumber, 
 NULL, 0, 100); 
 } 
#endif
///////////////////////////////////////////////////////////////////// 
err: 
 return status; 
} 
.......

/* if follow function exist, modify it as below */ 
static int qmi_wwan_bind_shared(struct usbnet *dev, struct usb_interface *intf) 
{ 
……
///////////////////////////////////////////////////////////////////////////////
#if 1 //Added by Quectel
 if (dev->udev->descriptor.idVendor == cpu_to_le16(0x2C7C)) { 
 dev_info(&intf->dev, "Quectel EC25&EC21&EC20 R2.0&EG91&EG95&EG06&EP06&EM06&BG96 work on RawIP mode\n"); 
 dev->net->flags |= IFF_NOARP; 
#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,9,1 )) 
 /* make MAC addr easily distinguishable from an IP header */ 
 if (possibly_iphdr(dev->net->dev_addr)) { 
 dev->net->dev_addr[0] |= 0x02; /* set local assignment bit */ 
 dev->net->dev_addr[0] &= 0xbf; /* clear "IP" bit */ 
 } 
#endif 
 usb_control_msg( 
 interface_to_usbdev(intf), 
 usb_sndctrlpipe(interface_to_usbdev(intf), 0), 
 0x22, //USB_CDC_REQ_SET_CONTROL_LINE_STATE 
 0x21, //USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE 
 1, //active CDC DTR 
 intf->cur_altsetting->desc.bInterfaceNumber, 
 NULL, 0, 100); 
 } 
#endif
////////////////////////////////////////////////////////////////////////////////// 
err: 
 return status; 
} 
……

/* if follow struct exist, modify it as below */ 
static const struct driver_info qmi_wwan_info = 
{ 
……
//////////////////////////////////////////
#if 1 //Added by Quectel 
 .tx_fixup = qmi_wwan_tx_fixup, 
 .rx_fixup = qmi_wwan_rx_fixup, 
#endif 
///////////////////////////////////////////////
} 
……

/* if follow struct exist, modify it as below */ 
static const struct driver_info qmi_wwan_force_int4 = { 
…… 
////////////////////////////////////////////////
#if 1 //Added by Quectel 
 .tx_fixup = qmi_wwan_tx_fixup, 
 .rx_fixup = qmi_wwan_rx_fixup, 
#endif 
///////////////////////////////////////////////
};

/* if follow struct exist, modify it as below */ 
static const struct driver_info qmi_wwan_shared = { 
…… 
//////////////////////////////////////////////
#if 1 //Added by Quectel 
 .tx_fixup = qmi_wwan_tx_fixup, 
 .rx_fixup = qmi_wwan_rx_fixup, 
#endif 
/////////////////////////////////////////////
};

9.Enable CONFIG_USB_NET_QMI_WWAN 
[*] Device Drivers → 
	-*- Network device support → 
		USB Network Adapters → 
			{*} Multi-purpose USB Networking Framework 
				<*> QMI WWAN driver for Qualcomm MSM based 3G and LTE modems 
				
10.选择并编译 4G 网卡驱动、测试工具（
在 openwrt 根目录下执行 make menuconfig 进入功能配置界面。选择
Kernel modules --->
 USB Support --->
 <M> kmod-usb-net............... Kernel modules for USB-to-Ethernet convertors
 <M> kmod-usb-net-qmi-wwan.................................... QMI WWAN driver
Network --->
 <M> uqmi......................... Control utility for mobile broadband modems	

11.测试 4G 网卡上网
[   16.160000] qmi_wwan 1-1.1:1.4: cdc-wdm0: USB WDM device
[   16.170000] qmi_wwan 1-1.1:1.4: Quectel EC25&EC21&EC20 R2.0&EG91&EG95&EG06&EP06&EM06&BG96 work on RawIP mode
[   16.190000] qmi_wwan 1-1.1:1.4 wwan0: register 'qmi_wwan' at usb-101c0000.ehci-1.1, WWAN/QMI device, a6:4f:1d:6c:f1:00
[   16.210000] usbcore: registered new interface driver qmi_wwan

 ls /dev  有的“cdc-wdm0”设备节点

11.执行命令 uqmi -d /dev/cdc-wdm0 --start-network internet --autoconnect //使网卡自动连接网络
 //开发板重启后同样有效。
  uqmi -d /dev/cdc-wdm0 --get-data-status //查看是否连接上 

12.给系统添加一个新接口
添加接口有两种方法，一种是通过修改配置文件，另外一种是通过网页添加。这里我们
采用比较直观的网页添加方法。
1).登陆 openwrt 配置页面，进入“网络”->“接口”->“添加新接口”。添加一个名为“wwan”
的新接口，并选择“wwan0”适配器 ,新接口协议选择 “DHCP客户端”
2).选择“防火墙设置”一栏，并配置成“wan”模式
3).保存&应用.

PS:
  1.上述涉及移植代码只需#if 1 ... #endif 部分到指定位置即可
  2./* if follow struct exist, modify it as below */代表存在即要修改,